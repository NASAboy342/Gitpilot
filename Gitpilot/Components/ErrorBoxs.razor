@using Gitpilot.Models
@using Gitpilot.Queues
@using Newtonsoft.Json

@implements IDisposable
@inject MessageQueue messageQueue

<div class="container">
    @foreach (var baseResponse in _baseResponses)
    {
        <div class="message-box @(baseResponse.ErrorCode == 0 ? "success" : "error")">
            <div>@(baseResponse.ErrorCode == 0 ? "✓" : "✕")</div>
            <div class="message-text" >@baseResponse.ErrorMessage</div>
            <div class="close-button-container"><div @onclick="() => {CloseThisMessage(_baseResponses.IndexOf(baseResponse));}" class="close-button">✕</div></div>
        </div>
    }
</div>

@code {
    private List<BaseResponse> _baseResponses = new List<BaseResponse>();
    private Timer _timer;
    private bool _isJobDone = true;

    protected override void OnInitialized()
    {
        _timer = new Timer(UpdateComponent, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void UpdateComponent(object state)
    {
        if (!_isJobDone) return;
        _isJobDone = false;
        DequeueIfHaveNewMessage();
        RemoveErrorMessageWhenItsTime();

        await InvokeAsync(StateHasChanged);
        _isJobDone = true;
    }

    private void CloseThisMessage(int baseResponsesIndex)
    {
        try
        {
            _baseResponses.RemoveAt(baseResponsesIndex);
        }
        catch (Exception ex)
        {
            messageQueue.Send(new BaseResponse(ex));
        }
    }

    private void RemoveErrorMessageWhenItsTime()
    {
        try
        {
            if (_baseResponses.Count > 0)
                _baseResponses.RemoveAll(r => (DateTime.Now - r.CreatedTime) > TimeSpan.FromSeconds(15));
        }
        catch (Exception ex)
        {
            messageQueue.Send(new BaseResponse(ex));
        }

    }

    private void DequeueIfHaveNewMessage()
    {
        try
        {
            if (!messageQueue.IsEmpty())
                _baseResponses.Add(messageQueue.Dequeue());
        }
        catch (Exception ex)
        {
            messageQueue.Send(new BaseResponse(ex));
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
