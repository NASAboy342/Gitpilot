@using Gitpilot.Components.SvgGraphPart
@using Gitpilot.Helpers
@using Gitpilot.Models
@using Gitpilot.Models.ViewModels
@using Gitpilot.Services.Interfaces
@inject IServiceProvider serviceProvider
@inject IGitRepositoryService gitRepositoryService

<div class="container">
    <table class="commit-time-line-table">
        <tr class="commit-time-line-header-row">
            <th class="branch-header">BRANCH / TAG</th>
            <th class="graph-header">GRAPH</th>
            <th class="commit-header">COMMIT MESSAGE</th>
        </tr>
        @foreach(var commit in GitRepository.Commits)
        {
            <tr class="commit-time-line-body-row">
                <td class="commit-time-line-body-branch-td"><div class="commit-time-line-body-branch"style="background-color: @(_gitBranchViewModels.FirstOrDefault(g => g.BranchName.EndsWith(commit.BranchName))?.RgbColor ?? "")">@commit.BranchName</div> </td>
                <td class="commit-time-line-body-graph" >
                    <svg height="26px" >
                        @if(IsTopCommit(commit, out var fistGitBranchViewModel)){
                            <SvgTopCommit LineIndex="@(_gitBranchViewModels.IndexOf(fistGitBranchViewModel)+1)" RgbColor="@fistGitBranchViewModel.RgbColor" />
                        }else{
                            GetGitBranchViewModel(commit, out var gitBranchViewModel);
                            <SvgCommit LineIndex="@(_gitBranchViewModels.IndexOf(gitBranchViewModel)+1)" RgbColor="@gitBranchViewModel.RgbColor" />
                        }
                    </svg>
                </td>
                <td><span class="commit-time-line-body-commit-message">@commit.Message</span></td>
            </tr>
        }
    </table>
</div>

@code {
    [Parameter] public GitRepository GitRepository { get; set; }
    private List<GitBranchViewModel> _gitBranchViewModels = new List<GitBranchViewModel>();

    protected override async Task OnInitializedAsync()
    {
        Task.Run(() => GetCommits());
    }

    private async Task GetCommits()
    {
        using (var loading = serviceProvider.GetRequiredService<Func<string, OnLoading>>()("Loading git-graph data"))
        {
            if (GitRepository.Commits.Count > 0) return;
            while (GitRepository.LibGitRepository == null)
            {
                await Task.Delay(TimeSpan.FromSeconds(0.5));
            }
            GitRepository.Commits = gitRepositoryService.GetCommits(GitRepository.LibGitRepository);
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool IsTopCommit(GitCommit commit, out GitBranchViewModel gitBranchViewModel)
    {
        var isRigestered = _gitBranchViewModels.Any(g => g.BranchName.Equals(commit.BranchName, StringComparison.OrdinalIgnoreCase));
        if (!isRigestered)
        {
            _gitBranchViewModels.Add(new GitBranchViewModel
                {
                    BranchName = commit.BranchName
                });
        }

        gitBranchViewModel = _gitBranchViewModels.FirstOrDefault(g => g.BranchName.Equals(commit.BranchName, StringComparison.OrdinalIgnoreCase));
        return GitRepository.Commits.Where(c => c.BranchName.Equals(commit.BranchName, StringComparison.OrdinalIgnoreCase)).FirstOrDefault().Hash == commit.Hash;
    }
    private void GetGitBranchViewModel(GitCommit commit, out GitBranchViewModel gitBranchViewModel)
    {
        gitBranchViewModel = _gitBranchViewModels.FirstOrDefault(g => g.BranchName.Equals(commit.BranchName, StringComparison.OrdinalIgnoreCase));
    }
}
