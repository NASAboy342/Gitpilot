@inherits LayoutComponentBase
@using Gitpilot.Components.Common
@using Gitpilot.Components.SideBar
@using Gitpilot.Models
@using Gitpilot.Models.Parameters
@using Gitpilot.Services
@using Gitpilot.Services.Interfaces
@inject IFolderPickerService windowsFolderPicker
@inject IGitRepositoryService gitRepositoryService
@using Newtonsoft.Json

<div class="page">
    <article class="content">
        @Body
    </article>
    <div class="side-nav-bar">
        <div class="gitbranch-info">
            <GitBranchExplorer LocalBranches="_gitRepository.LocalBranches" RemoteBranches="_gitRepository.RemoteBranches"></GitBranchExplorer>
        </div>
    </div>
    <div class="quick-access-bar">
        <button>Undo    </button>
        <button>Redo    </button>
        <button>Fetch   </button>
        <button>Pull    </button>
        <button>Push    </button>
        <button>Branch  </button>
        <button>Stash   </button>
        <button>Pop     </button>
        <button class="plus-button" @onclick="TuggleCustomDialogVisibility">+</button>
    </div>
    <div class="app-name-cotainer">
        <img src="GitpilotIcon.png" alt="Icon"/>
        <div class="gitpiot-name">Gitpilot</div>
    </div>
    <div class="git-status-container">
        <GitStatus />
    </div>
    <CustomDialog IsVisible=isCustomDialogVisible OnVisibilityFalse="TuggleCustomDialogVisibility">
        <div class="dialog-container">
            <div><CustomButton>Clone Repository</CustomButton></div>
            <div @onclick="HandleRepoFolderPickIng"><CustomButton>Open Repository</CustomButton></div>
        </div>
    </CustomDialog>
</div>

@code {
    private bool isCustomDialogVisible = false;
    private FolderResult? _selectedRepo;
    private GitRepository? _gitRepository = new GitRepository();
    private List<GitRepository> _allOpenedGitRepositories = new List<GitRepository>();
    private LastSelectedGitRepository? _lastSelectedGitRepository;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetAllOpentRepositories();
        await GetLastOpentRepository();
    }

    private void TuggleCustomDialogVisibility()
    {
        isCustomDialogVisible = !isCustomDialogVisible;
    }
    private void TuggleCustomDialogVisibilityOff()
    {
        isCustomDialogVisible = false;
    }
    private async Task HandleRepoFolderPickIng()
    {
        _selectedRepo = await windowsFolderPicker.PickFolderAsync();
        _gitRepository = gitRepositoryService.OpenRepository(new OpentRepoParam{ DirectoryPath = _selectedRepo.FolderPath }).Data;
        //await gitRepositoryService.SaveGitRepository(_gitRepository);
    }
    private async Task GetAllOpentRepositories()
    {
        var allOpenedGitRepositories = await gitRepositoryService.GetAllOpentGitRepository();
        _allOpenedGitRepositories = allOpenedGitRepositories.Repositories;
    }
    private async Task GetLastOpentRepository()
    {
        var lastOpenedGitRepository = await gitRepositoryService.GetLastOpentGitRepository();
        _lastSelectedGitRepository = lastOpenedGitRepository.Repository;
    }
}
