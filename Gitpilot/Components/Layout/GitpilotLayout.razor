@inherits LayoutComponentBase
@using Gitpilot.Components.Common
@using Gitpilot.Components.SideBar
@using Gitpilot.Models
@using Gitpilot.Models.Parameters
@using Gitpilot.Services
@using Gitpilot.Services.Interfaces
@inject IFolderPickerService windowsFolderPicker
@inject IGitRepositoryService gitRepositoryService
@using Newtonsoft.Json

<div class="page">
    <article class="content">
        @Body
    </article>
    <div class="side-nav-bar">
        <div class="gitbranch-info">
            <GitBranchExplorer LocalBranches="_gitRepository.LocalBranches" RemoteBranches="_gitRepository.RemoteBranches"></GitBranchExplorer>
        </div>
    </div>
    <div class="quick-access-bar">
        <button>Undo    </button>
        <button>Redo    </button>
        <button>Fetch   </button>
        <button>Pull    </button>
        <button>Push    </button>
        <button>Branch  </button>
        <button>Stash   </button>
        <button>Pop     </button>
        <button class="plus-button" @onclick="TuggleCustomDialogVisibility">+</button>
    </div>
    <div class="app-name-cotainer">
        <img src="GitpilotIcon.png" alt="Icon"/>
        <div class="gitpiot-name">Gitpilot</div>
    </div>
    <div class="git-status-container">
        <GitStatus Options="_allRepoNames" CurrentRepository="@_gitRepository.Name" OnSelectRepository="HandleSwitchRepo" CurrentBranch="@_gitRepository.CurrenBranch.Name"></GitStatus>
    </div>
    <CustomDialog IsVisible=isCustomDialogVisible OnVisibilityFalse="TuggleCustomDialogVisibility">
        <div class="dialog-container">
            <div><CustomButton>Clone Repository</CustomButton></div>
            <div @onclick="HandleRepoFolderPickIng"><CustomButton>Open Repository</CustomButton></div>
        </div>
    </CustomDialog>
</div>

@code {
    private bool isCustomDialogVisible = false;
    private GitRepository? _gitRepository = new GitRepository();
    private List<GitRepository> _allOpenedGitRepositories = new List<GitRepository>();
    private LastSelectedGitRepository? _lastSelectedGitRepository;
    private List<string> _allRepoNames => _allOpenedGitRepositories.Select(g => g.Name).ToList();
    protected override async Task OnInitializedAsync()
    {
        await GetAllOpentRepositories(new GetAllOpentGitRepositoryParam());
        await GetLastOpentRepository();
    }

    private void TuggleCustomDialogVisibility()
    {
        isCustomDialogVisible = !isCustomDialogVisible;
    }
    private void TuggleCustomDialogVisibilityOff()
    {
        isCustomDialogVisible = false;
    }
    private async Task HandleRepoFolderPickIng()
    {
        var selectedRepoFolder = await windowsFolderPicker.PickFolderAsync();
        var opentRepository = gitRepositoryService.OpenRepository(new OpentRepoParam { DirectoryPath = selectedRepoFolder.FolderPath }).GitRepositoryData;
        var saveGitRepositoryResponse = await gitRepositoryService.SaveGitRepository(opentRepository);
        await GetAllOpentRepositories(new GetAllOpentGitRepositoryParam{IsForceReloadCache = true});
        var lastInsertedRepo = _allOpenedGitRepositories.OrderByDescending(r => r.Id).FirstOrDefault();
        var saveLastOpentGitRepositoryResponse = await gitRepositoryService.SaveLastOpentGitRepository(new LastSelectedGitRepository { GitRepositoryId = lastInsertedRepo.Id, Name = lastInsertedRepo.Name });
        await GetLastOpentRepository();
    }
    private async Task GetAllOpentRepositories(GetAllOpentGitRepositoryParam param)
    {
        var allOpenedGitRepositories = await gitRepositoryService.GetAllOpentGitRepository(param);
        _allOpenedGitRepositories = allOpenedGitRepositories.Repositories;
    }
    private async Task GetLastOpentRepository()
    {
        var lastOpenedGitRepository = await gitRepositoryService.GetLastOpentGitRepository();
        _gitRepository = lastOpenedGitRepository.Repository;
    }
    private async Task HandleSwitchRepo(string selectedRepo)
    {
        var selectedRepository = _allOpenedGitRepositories.FirstOrDefault(x => x.Name == selectedRepo);
        var saveLastOpentGitRepositoryResponse = await gitRepositoryService.SaveLastOpentGitRepository(new LastSelectedGitRepository { GitRepositoryId = selectedRepository.Id, Name = selectedRepository.Name });
        if (selectedRepository != null)
        {
            _gitRepository = gitRepositoryService.OpenRepository(new OpentRepoParam { DirectoryPath = selectedRepository .Path}).GitRepositoryData;
        }
    }
}
